// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:flutter/material.dart';

import 'package:sitesurface_flutter_openai/sitesurface_flutter_openai.dart';
import 'package:sitesurface_flutter_openai/src/common/models/message.dart';

/// The [ChatGPTBuilder] is a Flutter widget that uses the OpenAI API to enable a chatbot-like functionality in a Flutter application. It allows the user to send a message and receive a response from the chatbot, which is powered by OpenAI's GPT-3 language model. The chatbot's responses are generated by making a [CreateCompletionRequest] request to the OpenAI API using the [openAIClient] object.
/// The ChatGPTBuilder takes in the following arguments:
///
/// [openAIClient]: An OpenAIClient object that is used to make [CreateCompletionRequest] requests to the OpenAI API.
/// [builder]: a function that takes in three arguments - a [BuildContext] object, a list of [Message] objects which you can use to build list of conversations, and a function [onSend] - you can use it to sen text message to chatbot.
/// [completionRequest]: (optional) an instance of the [CreateCompletionRequest] class that represents the request to be made to the OpenAI API. This can be used to customize the request.
///
/// You can call [onSend] function to send a message. It appends the user's message to the conversation and makes a [CreateCompletionRequest] request to the OpenAI API using the [openAIClient] object. The chatbot's response is then added to the conversation and the [ValueNotifier] object is updated, triggering a rebuild of the widget tree.
class ChatGPTBuilder extends StatefulWidget {
  /// (optional) an instance of the [CreateCompletionRequest] class that represents the request to be made to the OpenAI API. This can be used to customize the request.
  final CreateCompletionRequest? completionRequest;

  /// An OpenAIClient object that is used to make [CreateCompletionRequest] requests to the OpenAI API.
  final OpenAIClient openAIClient;

  /// A function that takes in three arguments - a [BuildContext] object, a list of [Message] objects which you can use to build list of conversations, and a function [onSend] - you can use it to sen text message to chatbot.
  final Widget Function(BuildContext context, List<Message> messages,
      Future<void> Function(String) onSend) builder;
  const ChatGPTBuilder({
    Key? key,
    required this.openAIClient,
    required this.builder,
    this.completionRequest,
  }) : super(key: key);

  @override
  State<ChatGPTBuilder> createState() => _ChatGPTBuilderState();
}

class _ChatGPTBuilderState extends State<ChatGPTBuilder> {
  ValueNotifier<List<Message>> messageNotifier =
      ValueNotifier<List<Message>>([]);

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<List<Message>>(
        valueListenable: messageNotifier,
        builder: (context, value, _) {
          return widget.builder(context, value, onSend);
        });
  }

  Future<void> onSend(String message) async {
    var previousMessage = "";
    for (var messageObject in messageNotifier.value) {
      previousMessage += " ${messageObject.message}";
    }

    messageNotifier.value = [
      ...messageNotifier.value,
      Message(message: message, fromChatGPT: false)
    ];

    var complertionRequest = widget.completionRequest == null
        ? CreateCompletionRequest(
            model: "text-davinci-003", prompt: "$previousMessage|||$message")
        : widget.completionRequest!
            .copyWith(prompt: "$previousMessage|||$message");
    var res = await widget.openAIClient.completions
        .createCompletion(complertionRequest);
    if (res == null) return;
    if (res.choices.isEmpty) return;
    messageNotifier.value = [
      ...messageNotifier.value,
      Message(message: res.choices.first.text.trim(), fromChatGPT: true)
    ];
  }

  @override
  void dispose() {
    messageNotifier.dispose();
    super.dispose();
  }
}
